{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN4o2ZXq1Kmt3hzq2bCn9Mp",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/brunohfilho/AULA/blob/main/L%C3%B3gicaComputacional-S2-2024-%5B3011542443008%5D\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "print(\" p | q | r | s | p→q | r→s | p∨r | (p→q)∧(r→s)∧(p∨r) | q∨s | Resultado\")\n",
        "print(\"----------------------------------------------------------------------------\")\n",
        "\n",
        "for p in [0, 1]:\n",
        "    for q in [0, 1]:\n",
        "        for r in [0, 1]:\n",
        "            for s in [0, 1]:\n",
        "                # Etapas intermediárias\n",
        "                p_implica_q = not p or q  # p → q\n",
        "                r_implica_s = not r or s  # r → s\n",
        "                p_ou_r = p or r           # p ∨ r\n",
        "                q_ou_s = q or s           # q ∨ s\n",
        "\n",
        "                # (p → q) ∧ (r → s) ∧ (p ∨ r)\n",
        "                parte_esquerda = p_implica_q and r_implica_s and p_ou_r\n",
        "\n",
        "                # Resultado final: ((p → q) ∧ (r → s) ∧ (p ∨ r)) → (q ∨ s)\n",
        "                resultado = not parte_esquerda or q_ou_s\n",
        "\n",
        "                # Função para converter 0/1 em 'F' ou 'V'\n",
        "                def bool_str(valor):\n",
        "                    return 'V' if valor else 'F'\n",
        "\n",
        "                # Imprime cada linha da tabela com todas as etapas em 'V' ou 'F'\n",
        "                print(f\" {bool_str(p)} | {bool_str(q)} | {bool_str(r)} | {bool_str(s)} |  {bool_str(p_implica_q)}  |  {bool_str(r_implica_s)}  |  {bool_str(p_ou_r)}  |           {bool_str(parte_esquerda)}         |  {bool_str(q_ou_s)}  |     {bool_str(resultado)}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZZMG04qBOdiJ",
        "outputId": "d10e4e9f-dd1a-4736-f5bc-d93b45ea35bb"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " p | q | r | s | p→q | r→s | p∨r | (p→q)∧(r→s)∧(p∨r) | q∨s | Resultado\n",
            "----------------------------------------------------------------------------\n",
            " F | F | F | F |  V  |  V  |  F  |           F         |  F  |     V\n",
            " F | F | F | V |  V  |  V  |  F  |           F         |  V  |     V\n",
            " F | F | V | F |  V  |  F  |  V  |           F         |  F  |     V\n",
            " F | F | V | V |  V  |  V  |  V  |           V         |  V  |     V\n",
            " F | V | F | F |  V  |  V  |  F  |           F         |  V  |     V\n",
            " F | V | F | V |  V  |  V  |  F  |           F         |  V  |     V\n",
            " F | V | V | F |  V  |  F  |  V  |           F         |  V  |     V\n",
            " F | V | V | V |  V  |  V  |  V  |           V         |  V  |     V\n",
            " V | F | F | F |  F  |  V  |  V  |           F         |  F  |     V\n",
            " V | F | F | V |  F  |  V  |  V  |           F         |  V  |     V\n",
            " V | F | V | F |  F  |  F  |  V  |           F         |  F  |     V\n",
            " V | F | V | V |  F  |  V  |  V  |           F         |  V  |     V\n",
            " V | V | F | F |  V  |  V  |  V  |           V         |  V  |     V\n",
            " V | V | F | V |  V  |  V  |  V  |           V         |  V  |     V\n",
            " V | V | V | F |  V  |  F  |  V  |           F         |  V  |     V\n",
            " V | V | V | V |  V  |  V  |  V  |           V         |  V  |     V\n"
          ]
        }
      ]
    }
  ]
}